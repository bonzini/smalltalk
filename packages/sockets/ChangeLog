2014-07-26  Holger Hans Peter Freyther  <holger@freyther.de>

	* Tests.st: Remove DummyStream class >> #new.

2011-08-13  Paolo Bonzini <bonzini@gnu.org>

	* AbstractSocketImpl.st: Recheck file descriptor state between
	async and sync polling.

2011-08-13  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: Add #checkSoError, test file open in it
	first.

2011-03-24  Paolo Bonzini  <bonzini@gnu.org>

	* Buffers.st: Allow interruption of the fill block.

2011-03-24  Paolo Bonzini  <bonzini@gnu.org>

	* Buffers.st: Remove fill/flush blocks when closing the stream.

2011-03-09  Paolo Bonzini  <bonzini@gnu.org>

	* SocketAddress.st: Prefer returning addresses for the default
	address class when sending #byName: to SocketAddress.  Return nil
	from #allByName: when getaddrinfo succeeds but returns no address.

2011-02-04  Holger Hans Peter Freyther  <zecke@selfish.org>

	* UnitTest.st: Verify that the primitive are failing.

2011-02-04  Holger Hans Peter Freyther  <zecke@selfish.org>

	* package.xml: Add test section.
	* UnitTest.st: Add SUnit based testcase.

2011-01-19  Holger Hans Peter Freyther  <zecke@selfish.org>

	* Sockets.st: Use errno to test outcome of bind.

2010-12-04  Paolo Bonzini  <bonzini@gnu.org>

	* package.xml: Remove now superfluous <file> tags.

2010-09-27  Paolo Bonzini <bonzini@gnu.org>

	* Sockets.st: Return false for #isPeerAlive after a zero-byte read
	from the socket.  Reported by Holger Hans Peter Freyther.

2010-06-14  Paolo Bonzini <bonzini@gnu.org>

	* Sockets.st: Do not close a datagram socket upon timeout.
	Reported by Holger Hans Peter Freyther.

2010-06-13  Paolo Bonzini <bonzini@gnu.org>

	* AbstractSocketImpl.st: Check the return value of recvfrom and
	sendto for errors.

2010-06-13  Paolo Bonzini <bonzini@gnu.org>

	* SocketAddress.st: Avoid infinite mutual recursion between
	#fromSockAddr:port: and #extractFromSockAddr:port:.  The bug is
	elsewhere, but this isn't a bad idea anyway.

2010-06-12  Holger Hans Peter Freyther  <zecke@selfish.org>

	* Sockets.st: Make DatagramSocket local: string port: int
	work. Resolve the ipAddress to localAddr early on, use the
	localAddr instead of ipAddress to determine the addressClass
	and afterwards fallback to localhost in case localAddr was nil.

2010-06-12  Holger Hans Peter Freyther  <zecke@selfish.org>

	* Sockets.st: Add AbstractSocket class>>#addressFromString to
	parse a string into a SocketAddress and use it inside the
	ServerSocket and DatagramSocket class.

2010-06-12  Holger Hans Peter Freyther  <zecke@selfish.org>

	* Datagram.st: Add #dataSize, #dataSize: and #size.
	* AbstractSocketImpl.st: Call Datagram>>#dataSize: from the
	#receive:datagram selector with the bytes read, use
	Datagram>>#size in the #send:to:port selector to only send
	a limited amount of bytes from the Datagram>>#data.

2010-03-27  Paolo Bonzini <bonzini@gnu.org>

	* AbstractSocketImpl.st: Do not check errno unless a system call
	fails.

2010-01-01  Paolo Bonzini  <bonzini@gnu.org>

	* Update copyright years.

2009-10-08  Paolo Bonzini  <bonzini@gnu.org>

	* Buffers.st: Use pre-f7d0319 implementation of
	WriteStream>>#next:putAll:startingAt: in WriteBuffer.

2009-10-04  Paolo Bonzini  <bonzini@gnu.org>

	* Buffers.st: Implement #upTo: using #indexOf:.

2009-09-07  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: Check error after fileop 14.

2009-08-25  Paolo Bonzini  <bonzini@gnu.org>

	* sockets.c: Move to libgst/.
	* package.xml: Check for TCPaccept.

2009-08-21  Paolo Bonzini  <bonzini@gnu.org>

	* sockets.c: Another check_have_cloexec nit.

2009-08-13  Paolo Bonzini  <bonzini@gnu.org>

	* sockets.c: Fix if statements for check_have_cloexec.

2009-08-07  Paolo Bonzini  <bonzini@gnu.org>

	* sockets.c: Do not assume SOCK_CLOEXEC is present even if it is
	defined.

2009-08-05  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: Add #soError.
	* cfuncs.st: Rename #soError to #soError:.
	* sockets.c: Return errno/WSAGetLastError if getsockopt(SO_ERROR)
	fails.

2009-07-22  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: Abstract datagram factory using
	#datagramClass.
	* Sockets.st: Provide access to the implementation's datagramClass.

2009-07-17  Stefan Schmiedl  <s@xss.de>

	* Sockets.st: Fix documentation typo, remove duplicated code.

2009-06-08  Paolo Bonzini  <bonzini@gnu.org>

	* cfuncs.st: Fix remaining of CSockAddrStruct.

2009-06-06  Paolo Bonzini  <bonzini@gnu.org>

	* SocketAddress.st: Fix case where the machine is disconnected.

2008-12-30  Paolo Bonzini  <bonzini@gnu.org>

	* sockets.c: Discard EPIPE too, it is caught by POLLHUP.

2008-09-15  Paolo Bonzini  <bonzini@gnu.org>

	* Sockets.st: Fix #nextAvailable:... methods (broke DBD-MySQL).

2008-09-12  Paolo Bonzini  <bonzini@gnu.org>

	* sockets.c: connect returns EWOULDBLOCK for Winsock.

2008-08-29  Paolo Bonzini  <bonzini@gnu.org>

	* IP6SocketImpl.st: Fill in sa_len dutifully for BSD systems.
	* IPSocketImpl.st: Fill in sa_len dutifully for BSD systems.
	* SocketAddress.st: Document brokenness of BSD systems.
	* UnixSocketImpl.st: Fill in sa_len dutifully for BSD systems.
	* sockets.c: Undo the above dutifully for non-BSD systems.

2008-08-17  Paolo Bonzini  <bonzini@gnu.org>

	* sockets.c: Add wrappers for socket<->fd conversions.

2008-08-17  Paolo Bonzini  <bonzini@gnu.org>

	* sockets.c: Emulate FD_CLOEXEC on MinGW.

2008-08-11  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: Remove #soError.
	* cfuncs.st: Implement it as a callout.
	* sockets.c: Remove soError, add getSoError.  Do not pass POLLHUP
	errors to Smalltalk.

2008-08-06  Paolo Bonzini  <bonzini@gnu.org>

	* Buffers.st: Add #nextAvailable:putAllOn:, remove #nextHunkPutAllOn:
	and #nextHunk.
	* Sockets.st: Likewise.
	* tests.st: Change #nextHunkPutAllOn: to #nextAvailablePutAllOn:.

2008-08-05  Paolo Bonzini  <bonzini@gnu.org>

	* Buffers.st: Add #nextAvailable:into:startingAt:.
	* Sockets.st: Change #nextAvailable: into
	#nextAvailable:into:startingAt:.  Change the fill
	blocks to not use #read:from:to: and #write:from:to:.

2008-08-05  Paolo Bonzini  <bonzini@gnu.org>

	* Buffers.st: Add #nextHunk and #nextHunkPutAllOn:.
	* Sockets.st: Remove the lookahead instance variable.  Delegate
	more stuff to the readBuffer, including #nextHunk.  Implement
	#nextHunkPutAllOn:.
	* Tests.st: Modify test to use #nextHunkPutAllOn: for a 3-4x
	speed increase. :-P :-P :-P

2008-08-05  Paolo Bonzini  <bonzini@gnu.org>

	* Tests.st: Use StreamSocket for the server.

2008-08-05  Paolo Bonzini  <bonzini@gnu.org>

	* Datagram.st: Do not use ByteStream.

2008-08-04  Paolo Bonzini  <bonzini@gnu.org>

	* Sockets.st: Add StreamSocket>>#nextAvailable:.

2008-08-01  Paolo Bonzini  <bonzini@gnu.org>

	* sockets.c: Use SOCK_CLOEXEC if available, else use FD_CLOEXEC.

2008-07-28  Paolo Bonzini  <bonzini@gnu.org>

	* Buffers.st: Add ReadBuffer>>#availableBytes.
	* Sockets.st: Add StreamSocket>>#availableBytes.

2008-07-18  Paolo Bonzini  <bonzini@gnu.org>

	* IP6SocketImpl.st: New.
	* UnixSocketImpl.st: Move initialization...
	* init.st: ... here.
	* cfuncs.st: Add IPv6 functions.
	* sockets.c: Add IPv6 functions.

2008-07-18  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: Use a big ByteArray for addresses.
	* IPSocketImpl.st: Remove #createLocalAddress, CSockAddrStruct,
	#extractAddressesAfterLookup:.
	* SocketAddress.st: Rewrite access to class-instance variables,
	allow calling #allByName: on subclasses, use getaddrinfo,
	implement #extractAddressesAfterLookup: here.
	* UnixSocketImpl.st: Remove #createLocalAddress.
	* cfuncs.st: Add SocketAddress class accessors, getaddrinfo,
	freeaddrinfo.  Remove TCPlookupAllHostAddr and TCPgetAnyLocalAddress.
	* sockets.c: Remove myGetHostByName and getAnyLocalAddress,
	add afUnspec/pfUnspec, getaddrinfo/freeaddrinfo, addrinfo
	accessors.  Use getipnodebyaddr if available.

2008-07-15  Paolo Bonzini  <bonzini@gnu.org>

	* SocketAddress.st: Fix parameter name for #=, add #isMulticast.
	* UnixSocketImpl.st: New.
	* cfuncs.st: Add AF_UNIX/PF_UNIX constants.
	* package.xml: Add UnixSocketImpl.st.
	* sockets.c: Add AF_UNIX/PF_UNIX constants.
	* Tests.st: Make tests independent of the address family.

2008-07-15  Paolo Bonzini  <bonzini@gnu.org>
    
	* AbstractSocketImpl.st: Document classes, add #activeSocketImplClass.
	* Datagram.st: Document classes.
	* IPSocketImpl.st: Document classes.
	* SocketAddress.st: Document classes.  Add #newSocket:.
	* Sockets.st: Document classes.  Change #defaultImplementationClass
	to #defaultImplementationClassFor: or #activeSocketImplClass, use
	SocketAddress class>>#newSocket: instead of using directly
	AbstractSocket class>>#new:addressClass:.

2008-07-15  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: Remove #addressClass, replace #new with
	#newFor:.  Use SocketAddress class>>#fromSockAddr:port:.
	Define #outOfBandImplClass.  Check for getpeername and getsockname
	errors better.  Move OOBSocketImpl here...
	* IPSocketImpl.st: ... from here.  Remove class-side #addressClass
	from AbstractSocketImpl.
	* SocketAddress.st: Provide default implementation classes.
	Use #new:addressClass: in #newRawSocket.  Define
	SocketAddress class>>#fromSockAddr:port:.
	* Sockets.st: Add AbstractSocket class>>#new:addressClass:,
	use it instead of "self new: addressClass someSocketImplClass new"

2008-07-15  Paolo Bonzini  <bonzini@gnu.org>

	* Datagram.st: Likewise.
	* IPSocketImpl.st: Likewise.
	* SocketAddress.st: Likewise.
	* Sockets.st: Likewise.
	* init.st: Likewise.  Create TCP "forwarding" namespace.

2008-05-15  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: Replace ByteArray buffers with
	garbage-collected CObjects.
	* IPSocketImpl.st: Likewise.
	* cfuncs.st: Change #byteArray and #byteArrayOut arguments
	to #cObject.

2008-03-25  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: Use instance-side #checkError.

2008-03-18  Paolo Bonzini  <bonzini@gnu.org>

	* Buffers.st: Add WriteBuffer>>#isFull.
	* Sockets.st: Add #canRead, #canWrite, #ensureReadable,
	#ensureWriteable.  Map #available to #canRead (for backwards
	compatibility).
	* Tests.st: Use #canRead and #nextHunk.

2008-02-27  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: Make sure fd is not nil when calling
	out to C.

2008-02-08  Paolo Bonzini  <bonzini@gnu.org>

	* Sockets.st: Add #isPeerAlive to AbstractSocket.

2008-02-07  Paolo Bonzini  <bonzini@gnu.org>

	* Sockets.st: Move some methods up to AbstractSocket, create
	a superclass of Socket (StreamSocket) that only performs
	read buffering.

2008-02-07  Paolo Bonzini  <bonzini@gnu.org>

	* Sockets.st: Replace #nextPutAll: with #next:putAll:startingAt:.

2008-02-06  Paolo Bonzini  <bonzini@gnu.org>

	* Sockets.st: Add methods needed by Sport.

2008-01-18  Paolo Bonzini  <bonzini@gnu.org>

	* tcp.c: Cope with gethostbyname returning NULL.

2007-11-18  Freddie Akeroyd  <F.A.Akeroyd@rl.ac.uk>

	* tcp.c: Look for winsock 2.2.

2007-11-05  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: Add #valueWithoutBuffering:.
	* IPSocketImpl.st: Likewise.
	* Sockets.st: Use it when flushing.
	* cfuncs.st: Add IPPROTO_TCP and TCP_NODELAY constants
	as TCPSocketImpl class methods.
	* tcp.c: Add a function that exports TCP_NODELAY.

2007-03-08  Paolo Bonzini  <bonzini@gnu.org>

	* Buffers.st: Adjust for changes to Stream>>#copyFrom:.

2006-12-05  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.3 released.

2006-11-21  Paolo Bonzini  <bonzini@gnu.org>

        * tcp.c: Add GPL exception.

2006-05-09  Paolo Bonzini  <bonzini@gnu.org>

	* Sockets.st: Check if peer is dead in #bufferContents.

2005-05-09  Paolo Bonzini  <bonzini@gnu.org>

        * Sockets.st: Do not fail on #flush or #fill if the peer is
	not alive anymore.

2005-08-23  Mike Anderson  <msasjf@yahoo.co.uk>

        * Sockets.st: Fix thinkos.

2005-03-25  Paolo Bonzini  <bonzini@gnu.org>

	* cfuncs.st: Switch to new C-call descriptions.

2004-12-20  Paolo Bonzini  <bonzini@gnu.org>

	* tcp.c (O_NONBLOCK): Add here from sysdep.h.

2004-11-26  Paolo Bonzini  <bonzini@gnu.org>

	* SocketAddress.st: fix typo in #newRawSocket.

2003-11-03  Paolo Bonzini  <bonzini@gnu.org>

	* Buffers.st: force a buffer fill before triggering
	an EndOfStream notification.

2003-05-09  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.1.2 released.

	* Sockets.st: define AbstractSocket>>#isExternalStream.

2003-04-17  Paolo Bonzini  <bonzini@gnu.org>

        *** Version 2.1.1 (stable) released.

2003-04-12  Paolo Bonzini  <bonzini@gnu.org>

        *** Version 2.1 (stable) released.

2003-03-25  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: fix bug in datagram sockets'
	#nextPut:.  Thanks to the guy who reported it and whose
	address I've lost.

2003-03-01  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: add VMpr_FileDescriptor_socketOp
	primitives.

2002-12-24  Paolo Bonzini  <bonzini@gnu.org>

	* tcp.c: add function to export SO_ERROR
	* cfuncs.st: declare it
	* AbstractSocketImpl.st: check for SO_ERROR after
	waiting on a process; fix glitches in the handling of socket
	options.

2002-09-13  Paolo Bonzini  <bonzini@gnu.org>

        *** Versions 2.0c (development) and 2.0.6 (stable) released

2002-08-14  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0.5 (stable) released

	* Buffers.st: moved from examples/ since the browser
	is not using it anymore.
	* Sockets.st: allow a nil remote address for
	UDP sockets.

2002-08-12  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0b (development) released

	* IPSocketImpl.st: adapt to recent changes in
	CObject.
	* init.st: don't initialize URL (removed)

2002-08-07  Paolo Bonzini  <bonzini@gnu.org>

	*** Versions 2.0a (development) and 2.0.4 (stable) released

	* ContentHandler.st: removed
	* URL.st: removed

2002-07-17  Paolo Bonzini  <bonzini@gnu.org>

        *** Version 2.0.3 released

2002-07-11  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0.2 released
	
2002-07-06  Paolo Bonzini  <bonzini@gnu.org>

	* Sockets.st: add #waitForConnection to ServerSocket

2002-06-28  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0.1 released
	
2002-06-25  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0 released
	
2002-06-03  Paolo Bonzini  <bonzini@gnu.org>

	* tcp.c: fix UDP
	* Sockets.st: fix UDP
	* AbstractSocketImpl.st: fix UDP
	* Tests.st: added UDP loopback test

2002-06-02  Paolo Bonzini  <bonzini@gnu.org>

	* tcp.c: return address family in myGetHostByName,
	accept it in myGetHostByAddr (as a primitive support for IPv6)
	* SocketAddress.st: use the new calling conventions;
	Cache is now a class variable, not a class instance variable.
	Removed IPAddress class from this file
	* cfuncs.st: declare the new calling conventions; declare
	IPAddress class>>#addressFamily
	* Socket.st: demand the choice of the implementation
	class to the address class
	* IPSocketImpl.st: moved IPAddress here

2002-05-28  Paolo Bonzini  <bonzini@gnu.org>

	* ContentHandler.st: marked as obsolete and
	deemed that it will disappear in 2.1
	* URL.st: likewise

2002-05-11  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.6 released
	
2002-05-10  Paolo Bonzini  <bonzini@gnu.org>

	* tcp.c: copy a final zero address in gethostbyname

2002-04-14  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.5 released

2002-03-12  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.4 released

2002-01-29  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.3 released.

2002-01-04  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.2 released

2002-01-02  Paolo Bonzini  <bonzini@gnu.org>

	* TCP.st: load into the TCP namespace

2001-11-20  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.1 released

2001-11-13  Paolo Bonzini  <bonzini@gnu.org>

	* ContentHandler.st: prefixed # to symbols in arrays
	* SocketAddress.st: prefixed # to symbols in arrays
	* cfuncs.st: prefixed # to symbols in arrays

2001-10-27  Paolo Bonzini  <bonzini@gnu.org>

	* Tests.st: use the ServerSocket's local address
	for the client Socket.  Set ServerSocket's soReuseAddr
	option.

2001-10-26  Paolo Bonzini  <bonzini@amoia3.elet.polimi.it>

	* SocketAddress.st: removed "class" in occurrences of
	"self class at: ... cache:"

2001-04-20  Paolo Bonzini  <bonzini@gnu.org>

	* tcp.c: set errno to 0 instead of EINPROGRESS
	after a connect.

2001-04-20  Paolo Bonzini  <bonzini@gnu.org>

	* tcp.c: force the socket in non-blocking mode
	during connect.

2001-04-16  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: subclass from FileDescriptor
	* cfuncs.st: don't declare oobAvailable
	* init.st: don't file in UnixStream
	* tcp.c: removed UnixStream primitives

2001-04-02  Paolo Bonzini  <bonzini@gnu.org>

	* init.st: use ObjectMemory instead of init blocks.
	* SocketAddress.st: use ObjectMemory instead of init blocks.

2001-02-23  Paolo Bonzini  <bonzini@gnu.org>

	*** Released version 1.95.3

2001-02-02   Paolo Bonzini  <bonzini@gnu.org>

	* tcp.c: use new VMProxy
	* cfuncs.h: removed

2000-01-30  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: merged with SocketImpl.st,
	DatagramSocketImpl.st, MulticastSocketImpl.st; support
	multiple address families.
	* IPSocketImpl.st: created from TCPSocketImpl.st,
	UDPSocketImpl.st, OOBSocketImpl.st, ICMPSocketImpl.st
	* SocketAddress.st: created from IPAddress.st
	* Sockets.st: created from AbstractSocket.st,
	Socket.st, DatagramSocket.st, MulticastSocket.st,
	ServerSocket.st

2000-01-30  Paolo Bonzini  <bonzini@gnu.org>

	* cfuncs.st: declared oobAvailable, sockStream, msgOOB and msgPeek
	* tcp.c: declared oobAvailable, sockStream, msgOOB and msgPeek
	* TCP.st: load OOBSocketImpl.st and RawSocketImpl.st
	* SocketImpl.st: added #outOfBandImplementation and
	#outOfBandInitialize:, moved many methods from TCPSocketImpl.st
	* MulticastSocketImpl.st: new file
	* OOBSocketImpl.st: new file
	* ICMPSocketImpl.st: new file
	* TCPSocketImpl.st: added #outOfBandImplementationClass,
	moved many methods to SocketImpl
	* UDPSocketImpl.st: moved many methods to DatagramSocketImpl
	* Datagram.st: added #data:, removed #sockAddr
	* DatagramSocket.st: allow to specify a default receiver
	and a buffer size, added #raw
	* DatagramSocketImpl.st: use #send:to:port: in #nextPut:,
	moved many methods from UDPSocketImpl.st

2000-06-17  Paolo Bonzini  <bonzini@gnu.org>

	*** Released versions 1.95 (development) and 1.7.5 (stable)

2000-05-08  Paolo Bonzini  <bonzini@gnu.org>

	* cfuncs.st: in some function definitions, changed
	the byteArray type specifier to byteArrayOut.  This fixes
	bugs with accessing the local and remote addresses of
	sockets, and with receiving datagrams.

2000-05-04  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.94.90 released

2000-04-25  Paolo Bonzini  <bonzini@gnu.org>

	* Datagram.st: added methods to use different ObjectDumpers
	* DatagramSocket.st: #peek: and #receive: now answer the
	Datagram.
	* *: commented the source code.

2000-04-12  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.7.4 released

2000-04-08  Paolo Bonzini  <bonzini@gnu.org>

	* tcp.c: properly ignore SIGPIPE

2000-03-23  Paolo Bonzini  <bonzini@gnu.org>
 
	*** Version 1.7.3 released

2000-03-11  Paolo Bonzini  <bonzini@gnu.org>
 
	*** Version 1.7.2 released

2000-02-27  Paolo Bonzini  <bonzini@gnu.org>

	* URL.st: implemented #= and hashing as per RFC 2068

2000-02-23  Paolo Bonzini  <bonzini@gnu.org>

	* SocketImpl.st: added #hasBeenConnectedTo: to
	fix problem with the #remoteAddress of sockets created
	with #accept:
	* TCPSocketImpl.st: fixed #accept:
	* tcp.c: fixed getHostByAddr when host is unknown to
	the DNS server.

2000-02-22  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.7.1 released

2000-02-21  Paolo Bonzini  <bonzini@gnu.org>

	* Socket.st: can adjust read/write buffer sizes after the
	Socket object has been created.

2000-02-15  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.7 released

2000-01-31  Paolo Bonzini  <bonzini@gnu.org>

	*** Sixth beta of 1.7 (labeled 1.6.85) released

2000-01-31  Paolo Bonzini  <bonzini@gnu.org>

	* TCPSocketImpl.st: fixed `message not understood' in #accept:
	* Socket.st: added the #producerConsumerTest

2000-01-30  Paolo Bonzini  <bonzini@gnu.org>

	* IPAddress.st: fixed \\ instead of // in port:
	* Socket.st: fixed buffer filling to reveal dead connections,
	added a couple of test methods.
	* UnixStream.st: moved #canRead and #canWrite here from
	TCPSocketImpl and UDPSocketImpl.
	* TCPSocketImpl.st: removed #canRead/#canWrite
	* UDPSocketImpl.st: removed #canRead/#canWrite
	* AbstractSocketImpl.st: removed #canRead/#canWrite

2000-01-28  Paolo Bonzini  <bonzini@gnu.org>

	* cfuncs.st: #anyLocalAddress had second arg declared
	as byteArray (should have been byteArrayOut).
	* tcp.c: fixed getAnyLocalAddress (missing cast to long)
        * UDPSocketImpl.st: copied changes to TCPSocketImpl.st
        here

2000-01-11  Nicolas Burrus  <Nicolas.Burrus@epita.fr>

        * TCPSocketImpl.st: changed 'socket' to 'create' in
        method create
        * TCPSocketImpl.st: in methods canWrite and canRead
        changed 'forReading' to 'reading'
        * TCPSocketImpl.st: in getPeerName "intAt:" makes an
        error, replaced with "at:"
        * cfuncs.st: changed "Smalltalk" to "Namespace current"

2000-01-10  Nicolas Burrus  <Nicolas.Burrus@epita.fr>

        * IPAdress.st: fixed bug in #allByName (`host := aString 
        asLowerCase' was after the conditional)
        * Socket.st: #initialize now initializes Read/WriteBufferSize
        and defaultImplementationClass too.
        * TCPSocketImpl.st: 'pfInit' changed to 'pfInet'

1999-12-28  Paolo Bonzini  <bonzini@gnu.org>

	*** Fifth beta of 1.7 (labeled 1.6.84) released

1999-11-26  Paolo Bonzini  <bonzini@gnu.org>

	*** Fourth beta of 1.7 (labeled 1.6.83) released

1999-10-31  Paolo Bonzini  <bonzini@gnu.org>

	*** Third beta of 1.7 (labeled 1.6.82) released

1999-10-22  Paolo Bonzini  <bonzini@gnu.org>

	* IPAddress.st: method to return the IP address class
	was named #class which broke everything (now it is
	#addressClass).

1999-10-17  Paolo Bonzini  <bonzini@gnu.org>

	* TCP.st: removed declaration of forward references
	to nil now that Undeclared is available.

1999-10-13  Paolo Bonzini  <bonzini@gnu.org>

	* ReadBuffer.st: moved to examples/Buffers.st
	* WriteBuffer.st: moved to examples/Buffers.st
	* TCP.st: now loads examples/Buffers.st

	* AbstractSocket.st: added time-outs
	* Socket.st: added time-outs
	* DatagramSocket.st: added time-outs

	* TCPSocketImpl.st: added #canRead/#canWrite
	* UDPSocketImpl.st: added #canRead/#canWrite
	* cfuncs.st: added support for #canRead/#canWrite
	* tcp.c: added support for #canRead/#canWrite

1999-10-09  Paolo Bonzini  <bonzini@gnu.org>

	*** Second beta of 1.7 (labeled 1.6.81) released

1999-09-29  Paolo Bonzini  <bonzini@gnu.org>

	* ReadBuffer.st: added #bufferContents and #isFull
	* Socket.st: removed PositionableStream methods since they
	are in Stream now.

1999-09-25  Paolo Bonzini  <bonzini@gnu.org>

	*** First beta of 1.7 (labeled 1.6.80) released

1999-09-18  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocket.st: moved buffering to Socket.st, changed
	superclass to Stream
	* IPAddress.st: support for "a.b.c", "a.b", "a" addresses in
	#fromString:
	* Socket.st: moved buffering from AbstractSocket.st, added
	various PositionableStream methods

1999-08-29  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.6.2 released.

1999-08-27  Paolo Bonzini  <bonzini@gnu.org>

	* ContentHandler.st: incorporated part of URLConnection.st;
	test for TIFF files includes the version number (not really
	orthodox but makes the test more precise).
	* HTTPConnection.st: removed.
	* URLConnection.st: moved class methods to ContentHandler,
	removed instance methods.
	* TCP.st: changed in the list of files to be loaded.

1999-07-26  Paolo Bonzini  <bonzini@gnu.org>

	* tcp.c: added `select' hacks from 1.1.5's tcp.c

1999-06-25  Paolo Bonzini  <bonzini@gnu.org>

	*** Bug-fixing version 1.6.1 released.

1999-06-21  Paolo Bonzini  <bonzini@gnu.org>

        * ContentHandler.st: changed category to Sockets-RFC.
        * HTTPConnection.st: changed category to Sockets-RFC. Added
        pattern-based choice of whether to use or not a proxy.
        * URLConnection.st: changed category to Sockets-RFC.
        * URL.st: changed category to Sockets-RFC.
        * tcp.c: added fullWrite.
        * tcp.c: the `write' callout now uses the fullWrite wrapper.

1999-06-17  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.6 released.

1999-05-10  Paolo Bonzini  <bonzini@gnu.org>

	* URL.st: added #file accessor, which I had forgotten
	* URLConnection.st: added a default file extension map.

1999-04-27  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.5.beta3 released.

1999-04-23  Paolo Bonzini  <bonzini@gnu.org>

	* tcp.c: added usage of the new HAVE_GETHOSTNAME symbol
	in gstconf.h

1999-04-10  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.5.beta2 released.

1999-03-15  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.5.beta1 released.

1999-01-18  Paolo Bonzini  <bonzini@gnu.org>

	* URLConnection.st: created.
	* HTTPConnection.st: created.
	* Init.st: Created.

1999-01-17  Paolo Bonzini  <bonzini@gnu.org>

	* URL.st: created.

1999-01-16  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocketImpl.st: created.
	* DatagramSocketImpl.st: created.
	* SocketImpl.st: created.
	* tcp.c: Happy birthday tcp.c!! Changed to support
	new socket implementation.
	* TCPSocketImpl.st: created.
	* UDPSocketImpl.st: created.

1999-01-15  Paolo Bonzini  <bonzini@gnu.org>

	* AbstractSocket.st: Created
	* BufferedStream.st: Created
	* ContentHandler.st: Created
	* Datagram.st: Created.
	* DatagramSocket.st: Created
	* IPAddress.st: Created from tcp/hosts.st.
	* MulticastSocket.st: Created
	* ServerSocket.st: Created
	* Socket.st: Created
	* TCP.st: Created.

1998-10-18  Paolo Bonzini  <bonzini@gnu.org>

	* UnixStream.st: Changed tell to a particular case of lseek

1998-09-02  Paolo Bonzini  <bonzini@gnu.org>

	*** Began development of version 1.6

1995-09-30  Steve Byrne  <sbb@gnu.org>

	*** Version 1.1.5 released.

1995-01-16  Steve Byrne  <sbb@gnu.org>

	* tcp.c: Created.

1994-09-15  Steve Byrne  <sbb@gnu.org>

	*** Version 1.2.alpha1 released.

1992-02-23  Steve Byrne  <sbb@gnu.org>

	* UnixStream.st: Also added readShort and friends.
	* UnixStream.st: Added direction constants

1990-11-17  Steve Byrne  <sbb@gnu.org>

	* UnixStream.st: added read:numBytes:
	* UnixStream.st: Added skip: method.
	* UnixStream.st: Installed as a built-in class.
